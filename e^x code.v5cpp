{"mode":"Text","textContent":"// ----------------------------------------------------------------------------\n//                                                                            \n//    Project:                                               \n//    Author:\n//    Created:\n//    Configuration:        \n//                                                                            \n// ----------------------------------------------------------------------------\n#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor intake = motor(PORT9, ratio18_1, false);\n\nmotor catapult = motor(PORT10, ratio36_1, false);\n\npotV2 Potent = potV2(Brain.ThreeWirePort.A);\n#pragma endregion VEXcode Generated Robot Configuration\n\n\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\nusing signature = vision::signature;\nusing code = vision::code;\n\n//Vexcode device constructors\nmotor motorLf = motor(PORT16, ratio18_1, true);\nmotor motorLm = motor(PORT17, ratio18_1, false);\nmotor motorLb = motor(PORT18, ratio18_1, false);\nmotor motorRf = motor(PORT11, ratio18_1, true);\nmotor motorRm = motor(PORT12, ratio18_1, false);\nmotor motorRb = motor(PORT13, ratio18_1, false);\ninertial DrivetrainInertial = inertial(PORT8);\ncontroller Controller1 = controller(primary);\n\nmotor_group LeftDriveSmart = motor_group(motorLf, motorLm, motorLb);\nmotor_group RightDriveSmart = motor_group(motorRf, motorRm, motorRb);\n\nsmartdrive robotDrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 12.56, 16, 16, distanceUnits::in);\n\nvoid autonomous(void) {\n  \n\n}\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // stop the motors if the brain is calibrating\n      if (DrivetrainInertial.isCalibrating()) {\n        LeftDriveSmart.stop();\n        RightDriveSmart.stop();\n        while (DrivetrainInertial.isCalibrating()) {\n          wait(25, msec);\n        }\n      }\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis1.position() + Controller1.Axis3.position();\n      int drivetrainRightSideSpeed = Controller1.Axis1.position() - Controller1.Axis3.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n        LeftDriveSmart.stop();\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n        \n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control catapult\n      if (Controller1.ButtonL1.pressing()) {\n        catapult.setVelocity(100, percent);\n        // while (Potent.value(degrees) != 2.26) {\n        //   catapult.spinFor(reverse, 60, degrees);\n        //   Brain.Screen.setCursor(1, 1);\n        //   Brain.Screen.clearScreen();\n        //   Brain.Screen.print(Potent.value(degrees));\n        //   wait(1000, msec);\n        // }\n        catapult.spinFor(reverse, 360, degrees);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        catapult.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      }else if (!Controller1LeftShoulderControlMotorsStopped) {\n        catapult.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control intake\n      if (Controller1.ButtonR1.pressing()) {\n        intake.setVelocity(100, percent);\n        intake.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        intake.setVelocity(100, percent);\n        intake.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        intake.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n      //check the Y status to start autonomous\n      if (Controller1.ButtonY.pressing()) {\n        // automonous code\n        Brain.Screen.clearScreen();\n        Brain.Screen.print(\"autonomous code\");\n        \n        intake.spinFor(forward, 69, degrees);\n        robotDrive.turnFor(270, degrees);\n        robotDrive.driveFor(forward, 1500, distanceUnits::mm);\n        intake.spinFor(forward, 69, degrees);\n        catapult.spinFor(reverse, 360, degrees);\n      \n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n\n\nint main() {\n  // create competition instance\n  competition Competition;\n\n  \n  Brain.Screen.print(Potent.value(degrees));\n  LeftDriveSmart.setStopping(brake);\n  RightDriveSmart.setStopping(brake);\n  \n\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}\n","textLanguage":"cpp","rconfig":[{"port":[9],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"catapult","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[1],"name":"Potent","customName":true,"deviceType":"PotentiometerV2","deviceClass":"potV2","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}